{
	"info": {
		"_postman_id": "05db12b4-f39c-41ba-b9bf-cda12128fec3",
		"name": "Stepik Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "23495792"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "Set Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let CompanyList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"company_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_address\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_status\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\"ACTIVE\", \"CLOSED\", \"BANKRUPT\"]\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description_lang\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\":\r",
									"                        {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"translation_lang\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                \"translation\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"translation_lang\",\r",
									"                                \"translation\"\r",
									"                            ]\r",
									"                        }\r",
									"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"company_id\",\r",
									"                    \"company_name\",\r",
									"                    \"company_address\",\r",
									"                    \"company_status\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        },\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"meta\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let Company = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"company_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_address\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"ACTIVE\",\r",
									"                \"BANKRUPT\",\r",
									"                \"CLOSED\"\r",
									"            ]\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description_lang\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\r",
									"                            \"EN\",\r",
									"                            \"RU\",\r",
									"                            \"PL\",\r",
									"                            \"UA\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"translation\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\",\r",
									"    ]\r",
									"};\r",
									"\r",
									"let UsersList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": [\"integer\", \"null\"]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"\r",
									"let ResponseUser = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"last_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"last_name\",\r",
									"        \"user_id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let HTTPValidationError = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"loc\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": [\r",
									"                                \"string\",\r",
									"                                \"integer\"\r",
									"                            ]\r",
									"                        }\r",
									"                    },\r",
									"                    \"msg\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"loc\",\r",
									"                    \"msg\",\r",
									"                    \"type\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let MeResponse = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email_address\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"valid_till\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\",\r",
									"        \"user_name\",\r",
									"        \"email_address\",\r",
									"        \"valid_till\"\r",
									"    ]\r",
									"};\r",
									"let TokenResponse = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"CompanyList\", JSON.stringify(CompanyList));\r",
									"pm.environment.set(\"Company\", JSON.stringify(Company));\r",
									"pm.environment.set(\"UsersList\", JSON.stringify(UsersList));\r",
									"pm.environment.set(\"ResponseUser\", JSON.stringify(ResponseUser));\r",
									"pm.environment.set(\"HTTPValidationError\", JSON.stringify(HTTPValidationError));\r",
									"pm.environment.set(\"MeResponse\", JSON.stringify(MeResponse));\r",
									"pm.environment.set(\"TokenResponse\", JSON.stringify(TokenResponse));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": "{{baseUrl}}/api/"
					},
					"response": []
				}
			]
		},
		{
			"name": "companies",
			"item": [
				{
					"name": "1 CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/companies/"
					},
					"response": []
				},
				{
					"name": "2 CompaniesEnableSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"\r",
									"pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"pm.expect(pm.response.headers.get('Location')).to.be.oneOf(['https://send-request.me/api/companies','https://send-request.me/api/companies/'])\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": true,
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://send-request.me/api/companies/"
					},
					"response": []
				},
				{
					"name": "3 CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with limit=5\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(5);\r",
									"});\r",
									"pm.test(\"Verify offset\", function(){\r",
									"    pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 CompaniesACTIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    for(let company of pm.response.json().data){\r",
									"        pm.expect(company.company_status).to.be.eql(\"ACTIVE\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5 CompaniesCLOSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    for(let company of pm.response.json().data){\r",
									"        pm.expect(company.company_status).to.be.eql(\"CLOSED\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=CLOSED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6 CompaniesBANKRUPT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    for(let company of pm.response.json().data){\r",
									"        pm.expect(company.company_status).to.be.eql(\"BANKRUPT\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=BANKRUPT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7 CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8 CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9 CompaniesWithStrQueryLimi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10 CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function(){\r",
									"    pm.expect(DataJson[0].company_id).to.eql(1)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11 CompaniesWithStrQueryOffset Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?offset=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "offset",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12 CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"URI ID to eql company id\", function () {\r",
									"    let compIdInUrl = parseInt(pm.request.url.path[2]);\r",
									"    let compIdInResp = pm.response.json().company_id;\r",
									"    pm.expect(compIdInUrl).to.eql(compIdInResp);\r",
									"});\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"        \r",
									"     )};\r",
									"\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/companies/1"
					},
					"response": []
				},
				{
					"name": "13 CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/companies/8"
					},
					"response": []
				},
				{
					"name": "14 CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"URI ID to eql company id\", function () {\r",
									"    let compIdInUrl = parseInt(pm.request.url.path[2]);\r",
									"    let compIdInResp = pm.response.json().company_id;\r",
									"    pm.expect(compIdInUrl).to.eql(compIdInResp);\r",
									"});\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/api/companies/1"
					},
					"response": []
				},
				{
					"name": "15 CompanyByIdInvLang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"URI ID to eql company id\", function () {\r",
									"    let compIdInUrl = parseInt(pm.request.url.path[2]);\r",
									"    let compIdInResp = pm.response.json().company_id;\r",
									"    pm.expect(compIdInUrl).to.eql(compIdInResp);\r",
									"});\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/api/companies/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "16 UsersWithLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with limit=10\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function(){\r",
									"    pm.expect(DataJson[0].user_id).to.eql(61)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"UsersList\"));\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=10&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "17 UsersWithInvLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "18 UsersWithStrLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=abc&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "abc"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "19 UsersEnableSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"\r",
									"pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"pm.expect(pm.response.headers.get('Location')).to.be.oneOf(['https://send-request.me/api/users','https://send-request.me/api/users/'])\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://send-request.me/api/users"
					},
					"response": []
				},
				{
					"name": "20 UserCreate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name);\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name);\r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"    \r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"34 IssuesGetUserById\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Bri\",\r\n  \"last_name\": \"Vandercampf\",\r\n  \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/"
					},
					"response": []
				},
				{
					"name": "21 UserCreatedWithInvCompanyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/"
					},
					"response": []
				},
				{
					"name": "22 UserCreatedWithNullRequired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"\tpm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Bri\",\r\n  \"last_name\": null,\r\n  \"company_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/"
					},
					"response": []
				},
				{
					"name": "23 UserCreatedWithClosedCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Bri\",\r\n  \"last_name\": \"Vandercampf\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/"
					},
					"response": []
				},
				{
					"name": "24 UserCreatedWithoutRequired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"\tpm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Bri\",\r\n  \"company_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/"
					},
					"response": []
				},
				{
					"name": "25 GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"\tpm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "26 GetUncreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/users/10000"
					},
					"response": []
				},
				{
					"name": "27 UserUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", \"1\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "28 UserUpdateWithNonexCompanyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 11\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/8501"
					},
					"response": []
				},
				{
					"name": "29 UpdateNonexUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/850100"
					},
					"response": []
				},
				{
					"name": "30 DeletCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is object\", function(){\r",
									"    pm.expect(pm.response.json()).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "31 DeletNonexUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/users/850100"
					},
					"response": []
				}
			]
		},
		{
			"name": "issues",
			"item": [
				{
					"name": "32 IssuesCompanyesWithQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with limit=1\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(1);\r",
									"});\r",
									"pm.test(\"Verify offset\", function(){\r",
									"    pm.expect(DataJson[0].company_id).to.eql(2)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    for(let company of pm.response.json().data){\r",
									"        pm.expect(company.company_status).to.be.eql(\"ACTIVE\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?limit=1&offset=1&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "33 IssuesCompanyByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"35 IssuesUserCreated\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/issues/companies/4"
					},
					"response": []
				},
				{
					"name": "34 IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"\tpm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"21 UserCreatedWithInvCompanyId\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/issues/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "35 IssuesUserCreated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Pifagor\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Samosskiy\");\r",
									"pm.collectionVariables.set(\"company_id\", \"3\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);  \r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/issues/users/"
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "create token (auth)",
					"item": [
						{
							"name": "01 LoginValidationLenght=3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", pm.response.json().token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token received\", function(){\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"SQL\",\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "02 LoginValidationLenght=7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token received\", function(){\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"ILoveNY\",\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "03 LoginValidationLenght=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"pm.test('Schema is valid', function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"i\",\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "04 LoginValidationLenght=2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"pm.test('Schema is valid', function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"IL\",\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "05 LoginValidationLenght=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"pm.test('Schema is valid', function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"\",\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "06 AuthWithoutLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"pm.test('Schema is valid', function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\":\"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "07 AuthWithoutPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"pm.test('Schema is valid', function(){\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"ILNY\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "08 AuthWithInvPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"ILNY\",\r\n\"password\":\"iwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						},
						{
							"name": "09 AuthWithPasswordLenght=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"login\":\"ILNY\",\r\n\"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/auth/authorize"
							},
							"response": []
						}
					]
				},
				{
					"name": "get user info",
					"item": [
						{
							"name": "10 GetDataWithValidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let schema= JSON.parse(pm.environment.get(\"MeResponse\"));\r",
											"pm.test('Schema is valid',function(){pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/auth/me"
							},
							"response": []
						},
						{
							"name": "11 GetDataWithInvToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body about incorrect token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Token is incorrect.');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let token = pm.environment.get(\"token\");  // берем наш токен\r",
											"let tokenNew = token.slice(0, -10) + \"qwe1rty3BB\";  // срезаем 10 последних символов и добавляем новые символы\r",
											"\r",
											"pm.variables.set(\"token\", tokenNew); // сохраняем в локальную переменную \"token\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/auth/me"
							},
							"response": []
						},
						{
							"name": "12 GetDataWithExpToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Body about expired token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Token is expired.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const req = { // объявили переменную req\r",
											"    url: \"https://send-request.me/api/auth/authorize\", // на этот URL отправляем запрос\r",
											"    method: \"POST\", // Определяем метод\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\", // определяем формат request body\r",
											"        raw: { // в ключ raw передаем JSON, который мы отправляли в С-01\r",
											"            \"login\": \"Abc\",\r",
											"            \"password\": \"qwerty12345\",\r",
											"            \"timeout\": 3, // не забываем изменить время жизни токена на более короткий период\r",
											"        },\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(req, function (err, response) { // передаем переменную req первым аргументом\r",
											"    pm.variables.set(\"token\", response.json().token) // сохраняем в лок. переменную актуальный токен\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, 5000); // ставим ожидание в 5 секунд, что-бы токен успел истечь"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/auth/me"
							},
							"response": []
						},
						{
							"name": "13 GetDataWithoutToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body about auth method\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Please use auth method');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/auth/me"
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": {
							"value": "{{token}}",
							"key": "x-token"
						}
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "my pm",
			"item": [
				{
					"name": "36 UserInvBodyUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')});\r",
									"\r",
									"let schema= {\r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "37 UsersEnableSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Request by http\", function() {\r",
									"\r",
									"pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"pm.expect(pm.response.headers.get('Location')).to.be.oneOf(['https://send-request.me/api/users','https://send-request.me/api/users/'])\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://send-request.me/api/users"
					},
					"response": []
				},
				{
					"name": "38 DeletedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')});\r",
									"\r",
									"let schema= {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {    \r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/users/8501"
					},
					"response": []
				},
				{
					"name": "39 CompaniesWithNullQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with limit=0\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description_lang\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"translation_lang\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"translation\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\",\r",
									"            \"description\",\r",
									"            \"description_lang\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"limit\",\r",
									"        \"offset\",\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "40 DeleteUserWithInwId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": [\"string\", \"integer\"]\r",
									"                },\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/users/ADB"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 500ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});",
					"",
					"if (pm.request.url.protocol === \"https\" & pm.request.method != \"HEAD\") {",
					"    pm.test(\"Headers is valid\", () => {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
					"        pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')",
					"    });",
					"}"
				]
			}
		}
	]
}